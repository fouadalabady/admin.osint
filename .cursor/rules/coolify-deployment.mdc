---
description: 
globs: 
alwaysApply: false
---
# Deploying the OSINT Dashboard to Coolify

This guide provides detailed instructions for deploying the OSINT Dashboard to Coolify, a self-hosted alternative to traditional cloud platforms.

## What is Coolify?

Coolify is an open-source, self-hostable platform that enables you to run your applications on your own infrastructure. It provides a user-friendly interface for managing deployments, similar to platforms like Vercel or Heroku, but with the advantage of running on servers you control.

## Prerequisites

Before deploying to Coolify, ensure you have:

1. A server running Linux with Docker installed
2. Coolify installed on your server (see [Coolify Installation Guide](mdc:https:/coolify.io/docs/installation))
3. SSH access to your server
4. A GitHub account with access to the repository
5. All required environment variables documented in `.env.example`
6. Completed all items in the pre-deployment section of the [deployment checklist](mdc:deployment-checklist.md)

## Coolify Setup Process

### Step 1: Install Coolify on Your Server

If you haven't already installed Coolify, run the following command on your server:

```bash
wget -q https://get.coolify.io -O /tmp/install.sh && bash /tmp/install.sh
```

Follow the on-screen instructions to complete the installation.

### Step 2: Configure Coolify

1. Access the Coolify dashboard (typically at `https://your-server-ip`)
2. Create an account or log in
3. Create a new project and team if needed

### Step 3: Connect Your Repository

1. In the Coolify dashboard, go to "Sources" and add a new GitHub source
2. Authorize Coolify to access your GitHub repositories
3. Select the OSINT Dashboard repository

## Deploying the OSINT Dashboard

### Step 1: Create a New Service

1. From your Coolify dashboard, click "Create New Resource"
2. Select "Application"
3. Choose "Next.js" as the application type
4. Select your GitHub repository

### Step 2: Configure Deployment Settings

1. **Base Directory**: Leave empty (or set to `/` if required)
2. **Build Command**: Set to `npm run coolify-build`
3. **Start Command**: Set to `npm start`
4. **Port**: Set to `3000`
5. **Environment Variables**: Add all required variables from `.env.example`
   - Ensure you add all variables marked as "Required for Production"
   - Pay special attention to the following critical variables:
     - `NEXTAUTH_URL` (should be your production URL)
     - `NEXTAUTH_SECRET` (generate a secure random string)
     - `NEXT_PUBLIC_SUPABASE_URL`
     - `NEXT_PUBLIC_SUPABASE_ANON_KEY`
     - `SUPABASE_SERVICE_KEY`

### Step 3: Configure Advanced Settings

1. **Resource Allocation**:
   - CPU: 1 (minimum) to 2 (recommended)
   - Memory: 2GB (minimum) to 4GB (recommended)
   - Swap: 1GB (recommended)

2. **Persistent Storage**:
   - Add a volume for `.next/cache` to improve build performance
   - Path: `.next/cache`
   - Name: `next-cache`

3. **Build & Deployment Settings**:
   - Enable auto-deployment on push
   - Set the branch to `main` or your production branch

### Step 4: Deploy

1. Click "Save" to create the service
2. Click "Deploy" to start the initial deployment
3. Monitor the deployment logs for any issues

### Step 5: Configure Domain and SSL

1. In the service details page, go to "Domains"
2. Add your custom domain
3. Enable SSL (Let's Encrypt or custom certificate)
4. Update your DNS records to point to your server's IP

## Configuration Files

### coolify.json

We include a `coolify.json` file in the repository with optimized settings for Coolify:

```json
{
  "name": "osint-dashboard",
  "type": "application",
  "buildPack": "nextjs",
  "buildCommand": "npm run coolify-build",
  "startCommand": "npm start",
  "port": 3000,
  "env": {
    "NODE_ENV": "production",
    "NEXT_TELEMETRY_DISABLED": "1"
  },
  "volume": [
    {
      "path": ".next/cache",
      "name": "next-cache"
    }
  ]
}
```

### Dockerfile (Optional)

If you prefer to use a custom Dockerfile instead of Coolify's built-in Next.js buildpack, we've included an optimized Dockerfile in the repository:

```dockerfile
FROM node:18-alpine AS base
WORKDIR /app

# Dependencies
FROM base AS deps
COPY package.json package-lock.json ./
RUN npm ci

# Build
FROM base AS builder
COPY --from=deps /app/node_modules ./node_modules
COPY . .
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production
RUN npm run build

# Production
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

CMD ["node", "server.js"]
```

To use this Dockerfile instead of the buildpack:
1. In your service settings, select "Docker" as the deployment method
2. Ensure the Dockerfile is detected

## Continuous Deployment

Coolify can automatically deploy when you push to your repository:

1. In your service settings, enable "Auto Deploy"
2. Set the branch to deploy from
3. Configure webhook settings if needed

## Monitoring and Maintenance

### Viewing Logs

1. In the Coolify dashboard, select your application
2. Go to the "Logs" tab to view real-time logs

### Restarting or Rebuilding

1. To restart the application, click the "Restart" button
2. To rebuild and redeploy, click the "Redeploy" button

### Scaling Resources

If your application needs more resources:

1. Go to your service settings
2. Update the CPU, memory, and swap allocations
3. Save changes and restart the service

## Troubleshooting Common Issues

### Build Failures

1. **Memory Issues**: If builds fail due to memory errors:
   - Increase the memory allocation in service settings
   - Optimize your build process to use less memory

2. **Environment Variables**: If you see errors about missing environment variables:
   - Check that all required variables are defined in Coolify
   - Verify that the values are correct
   - Check if any variables need to be updated for your deployment environment

3. **Connectivity Issues**: If the build can't connect to external services:
   - Check your server's network configuration
   - Ensure required ports are open in your firewall
   - Verify that your server can reach external services (Supabase, etc.)

### Runtime Issues

1. **Container Not Starting**:
   - Check the logs for specific error messages
   - Verify that the start command is correct
   - Ensure your application is properly configured for production

2. **Database Connection Issues**:
   - Verify that your database is accessible from your server
   - Check connection strings and credentials
   - Ensure firewall rules allow connections

3. **Performance Problems**:
   - Monitor resource usage and increase allocations if needed
   - Consider implementing caching strategies
   - Use the persistent cache volume to improve build performance

## Backup and Recovery

### Creating Backups

1. Set up a regular backup process for:
   - Persistent storage volumes
   - Database data
   - Environment configuration

2. Use Coolify's backup features or set up custom backup scripts

### Recovery Process

In case of failure:

1. Restore from backups or redeploy the application
2. Verify that environment variables are correctly configured
3. Check logs for any errors during recovery

## Advanced Configurations

### Using a Reverse Proxy (Recommended)

For better security and performance, consider placing a reverse proxy like Nginx in front of your application:

1. Configure Nginx to proxy requests to your Coolify service
2. Set up SSL termination at the Nginx level
3. Configure caching headers for static assets

### Setting Up a CDN

To improve global performance:

1. Configure a CDN service (like Cloudflare) in front of your application
2. Set appropriate cache control headers for static assets
3. Configure your domain to use the CDN

## Additional Resources

- [Coolify Documentation](mdc:https:/coolify.io/docs)
- [Docker Documentation](mdc:https:/docs.docker.com)
- [Next.js Production Deployment](mdc:https:/nextjs.org/docs/deployment)
- [Nginx Reverse Proxy Configuration](mdc:https:/docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy) 