---
description: 
globs: 
alwaysApply: true
---
# DevOps Management & Best Practices Guide

**Project:** OSINT Dashboard & Agency Website  
**Version:** 1.8  
**Last Updated:** 2025-03-21

---

## 1. Project Overview

This project comprises a headless admin dashboard and agency website built with Next.js, React, Supabase, and shadcn/ui. The system includes:

- **Landing & Service Pages**  
- **Blog Module**  
- **Lead Generation Forms:**  
  - Schedule a Demo  
  - Contact Us  
  - Newsletter Subscription  
  - Join Our Team  

Additional features include:
- Multilingual support (Arabic & English) via next-intl and i18n routing.
- Secure authentication and role-based access control (RBAC) using NextAuth.js integrated with Supabase.
- Enhanced security measures such as Google reCAPTCHA v3, MFA, and OTP verification.

---

## 2. Environment Setup & Version Control

### 2.1 Local Development
- **Setup:**
  - Clone the repository from GitHub.
  - Install dependencies using:
    ```bash
    npm install
    ```
  - Create a `.env.local` file (refer to `.env.example`) and configure required environment variables.
  - Run the development server:
    ```bash
    npm run dev
    ```
- **Best Practices:**
  - Use containerization or virtual environments to mirror production settings as closely as possible.
  - Ensure consistency by aligning your local environment with staging and production configurations.
  - **Run full linting and type checking locally** (e.g., via `npm run lint:fix` and `npm run typecheck`) to catch and fix all errors before committing.

### 2.2 Version Control with GitHub
- **Repository Management:**
  - All code is versioned on GitHub.
  - Use branching strategies (e.g., feature branches, Git Flow) to manage new features, bug fixes, and experiments.
- **Best Practices:**
  - Commit frequently with clear, descriptive messages.
  - Utilize pull requests for thorough code reviews.
  - **Enforce pre-commit hooks, linters, and automated tests** to ensure code quality. No code should be merged if linting or type-checking errors remain.

### 2.3 Production with Coolify
- **Deployment Environment:**
  - Use Coolify as your production platform to deploy the latest stable releases.
  - Integrate Continuous Deployment (CD) pipelines with GitHub for automated builds and deployments.
- **Best Practices:**
  - Maintain strict separation of production, staging, and local environments.
  - Securely manage environment variables and rotate credentials regularly.
  - Consider blue-green or canary deployment strategies to mitigate risks during rollouts.
  - **Ensure that production builds are completely clean:** No debug logs, development commands, or error suppressions are permitted. All reported errors must be fixed before deployment.

---

## 3. Continuous Integration & Delivery (CI/CD)

### 3.1 Automated Pipelines
- **Build & Test:**
  - Set up CI pipelines (e.g., GitHub Actions) to automatically run unit, integration, and end-to-end tests on every commit.
  - Prioritize testing for critical modules such as authentication, form handling, and email workflows.
  - **Enforce Code Quality:** The CI pipeline must run linting (`npm run lint`) and type checking (`npm run typecheck`), and the build must fail if any errors or warnings are present. Use the production build command (`npm run build:production`) to enforce these checks.
- **Deployment Automation:**
  - Configure CD pipelines to push changes to Coolify only after successful tests, code reviews, and error-free builds.
  - Use approval gates for production deployments when necessary.

### 3.2 Rollback & Recovery
- Plan for automated rollback strategies in case of deployment failures.
- Implement comprehensive logging and monitoring (handled outside this document) to quickly diagnose and resolve issues.

---

## 4. Security & Compliance

### 4.1 Application Security
- **Authentication & Authorization:**
  - Use NextAuth.js with Supabase for secure authentication.
  - Implement role-based access control (RBAC) for managing different user types (Super Admin, Editor, Contributor).
  - Enforce Multi-Factor Authentication (MFonoperations.
- **Data Protection:**
  - Encrypt data in transit (TLS/SSL) and at rest.
  - Store tokens in HTTP-only cookies with secure token refresh mechanisms.

### 4.2 Infrastructure Security
- **Logging & Auditing:**
  - Utilize structured logging (e.g., with Pino) to capture detailed system and user eventntain immutable audit logs for sensitive actions.
- **Real-Time Monitoring:**
  - Integrate SIEM platforms to monitor logs and trigger alerts for anomalous activities.

---

## 5. Developer & Operational Guidance

### 5.1 Documentation & Developer Onboarding
- **Project Documentation:**
  - Keep the project roadmap, README, and additional docs (e.g., @Project Architecture, @Security Model) updated.
- **Onboarding:**
  - Ensure new team members understand the project structure, local setup, and CI/CD workflows.
  - Provide clear guidelines for local Supabase setup and environment configurations.

### 5.2 UI Component & Code Standards
- **UI Components:**
  - Use only the components provided by @shadcn/ui to ensure design consistency.
- **Coding Practices:**
  - Follow auto-formatting guidelines (Prettier, ESLint) and use strong typing (TypeScript recommended) to minimize runtime errors.
  - **Code Quality is Paramount:** Fix every lint and type-check errorâ€”simply passing the build is not acceptable. Every error must be addressed to maintain a clean, well-structured codebase.

---

## 6. Production Environment Sanitization & DevOps Enhancements

This section outlines specific guidelines for maintaining a clean production environment and incorporates additional DevOps details:

- **Separation of Concerns:**  
  - Ensure that production builds and deployments are free of any development-specific instructions, debug logs, or test endpoints.
  - Remove local development commands and instructions from production documentation and build artifacts.

- **Production Build Hygiene:**  
  - Implement build scripts that strip out development-only comments, debugging code, and testing frameworks.
  - Use environment-specific configurations to guarantee that development tools and instructions are not included in production bundles.

- **DevOps Enhancements:**  
  - Automate the cleaning process as part of the CI/CD pipeline, ensuring that the production version is always sanitized.
  - Regularly review build and deployment scripts to confirm that no inadvertent development instructions remain.
  - Monitor production logs for any residual debug or development messages, enforcing immediate cleanup if found.

- **Documentation Standards:**  
  - Maintain separate documentation for development and production environments.
  - Ensure that production documentation contains only operational details and secure configuration steps.

---

## 7. Environment Variables & Configuration

### 7.1 Key Environment Variables
| **Variable**            | **Description**                                           | **Example**                     |
|-------------------------|-----------------------------------------------------------|---------------------------------|
| `NEXTAUTH_URL`          | Base URL for NextAuth.js configuration                    | `https://yourapp.com`           |
| `NEXTAUTH_SECRET`       | Secret key for encrypting tokens/sessions                 | `super-secret-key`              |
| `SUPABASE_URL`          | URL for Supabase project                                  | `https://abcd1234.supabase.co`  |
| `SUPABASE_ANON_KEY`     | Public anonymous key for Supabase                         | `eyJh...`                       |
| `SUPABASE_SERVICE_KEY`  | Service key for server-side operations                    | `eyJh...`                       |
| `SMTP_HOST`             | SMTP server host                                          | `smtp.mailtrap.io`              |
| `SMTP_PORT`             | SMTP server port                                          | `587`                           |
| `SMTP_USER`             | SMTP username                                             | `username123`                   |
| `SMTP_PASSWORD`         | SMTP password                                             | `secret-password`               |
| `RECAPTCHA_SITE_KEY`    | Google reCAPTCHA site key                                 | `6Lc...`                        |
| `RECAPTCHA_SECRET_KEY`  | Google reCAPTCHA secret key                               | `6Lc...secret`                  |

### 7.2 Best Practices for Environment Variables
- Never commit `.env` files to version control.
- Use secure secrets management systems for production (e.g., GitHub Secrets, Coolify environment settings).
- Regularly rotate keys and credentials.

--lem**L Enwitonsducinting and type checks before committing.

- **Version Control & CI/CD:**  
  Use GitHub for versioning, automated testing, and continuous deployment to Coolify. The CI pipeline must enforce error-free builds by failing if any lint or type-check errors are present.

- **Security:**  
  Enforce strict authentication, RBAC, and data protection measures along with comprehensive logging and monitoring.

- **Production Hygiene:**  
  Enforce cleaning of production builds by removing any development-specific instructions, debug code, and test endpoints. No temporary error suppressions should remain in the production code.

- **Operational Excellence:**  
  Maintain updated documentation, regular security audits, and a well-defined incident response plan.

By integrating these DevOps practices, the project benefits from a streamlined development process, secure and reliable deployments, and a clean, maintainable codebase that prioritizes code quality over merely passing the build.

---

## 9. References

- @Next.js Documentation
- @React Documentation
- @Supabase Documentation
- @NextAuth.js Documentation
- @shadcn/ui Documentation
- @next-intl Documentation
- @i18n Routing Documentation
